#!/bin/bash


# bash <(curl -s http://test.janitor.parentnode.dk/installers/submodule-installer-osx)
# bash <(curl -s http://janitor.local/installers/submodule-installer-osx)


# Define output colors
RED=`tput setaf 1`
GREEN=`tput setaf 2`
NC=`tput sgr0`


# Variables (to optimize installation)
working_directory=$PWD
parentnode_env="n"
install_user=$( who am i | awk '{print $1}' )



# Turn off any existing color syntax
echo "${NC}"

echo
echo "             Janitor - Submodule installer"
echo
echo "--------------------------------------------------------"
echo


# Request sudo action before continuing
sudo ls &>/dev/null


echo
echo "Checking prerequisites ..."
echo


# Check if janitor is already available in current location
if [ -d "core" ] || [ -d "submodules/janitor" ]; then


	echo "Prerequisites: ${RED}ERROR${NC}"
	echo
	echo "Take it easy with the sauce or you'll drown the chicken!"
	echo "(It looks like you already have Janitor installed.)"
	echo

	exit 1


# Check if PWD is the root of a git respository
elif [ ! -d ".git" ]; then


	echo "Prerequisites: ${RED}ERROR${NC}"
	echo
	echo "Donkeys are not horses and surprisingly they dislike the comparison!"
	echo "(${working_directory} is not a Git repository.)"
	echo

	exit 1


# Everything is ok, continue installation
else 


	echo "Prerequisites: ${GREEN}OK${NC}"
	echo
	echo


fi



# Check if user is using the parentnode environment already
# This allows for a simpler installation
if [ -e "/srv/sites/apache/apache.conf" ]; then

	# Check if PWD is in parentnode working dir path (/srv/sites)
	realpath=$( readlink /srv/sites )

	# Project is in recommended folder (/srv/sites)
	if [ $( echo "${working_directory}" | grep "${realpath}" ) ]; then

		parentnode_env="Y"

		# Update WD
		working_directory=$( echo "${working_directory}" | sed "s#${realpath}#/srv/sites#" )

		# Automatically include hosts and Apache inclusion
		hosts_and_apache="Y"

	fi

fi



# Confirm install location
read -p "Install Janitor in ${working_directory} (Y/n): " install_current_path
# Declined install
if [ "${install_current_path}" != "Y" ]; then


	echo
	echo "Ok, you changed your mind. That's your business."
	echo

	exit 1


fi



# Ask for local domain
read -p "Local domain for this installation: " domain
# No domain
if [ "${domain}" = "" ]; then


	echo "${RED}"
	echo "Argh, I really wish you hadn't said that."
	echo "(Installation cannot be completed without a domain.)"
	echo "${NC}"

	exit 1


fi



# READY TO INSTALL

echo
echo


# Clone all relevant respositories
echo
echo "                   Cloning Janitor"
echo
echo "--------------------------------------------------------"
echo


mkdir submodules

# TODO: Update links to latest release (after release of 0.7.7)
git submodule add https://github.com/parentnode/janitor submodules/janitor
git submodule add https://github.com/parentnode/js-merger submodules/js-merger
git submodule add https://github.com/parentnode/css-merger submodules/css-merger

git commit -m 'Added Janitor submodules'
git push


echo
echo


# Prepare installation for browser setup
echo
echo "        Setting up initial Apache configuration"
echo
echo "--------------------------------------------------------"
echo



# Adding dummy index if theme does not exist
# Will be updated by janitor setup script
if [ ! -d "theme/www" ]; then

	mkdir -p theme/www
	touch theme/www/index.php

	echo "<?php header('Location: /janitor/admin/setup'); ?>" >> theme/www/index.php

fi



# PROJECT APACHE CONFIGURATION


echo
echo "Creating httpd-vhosts.conf for project"


# Adding apache configuration for project
mkdir apache &>/dev/null
# Remove any existing httpd-vhosts.conf
if [ -e "apache/httpd-vhosts.conf" ]; then
	rm apache/httpd-vhosts.conf
fi
# Create clean httpd-vhosts.conf
touch apache/httpd-vhosts.conf



# If user is not running standard parentnode env, additional configuration is required

# Not using the parentnode environment or project is not in recommended path
# For MAMP etc. support
if [ "${parentnode_env}" = "n" ]; then


	echo
	# Ask user: Include in core apache and hosts configuration?
	read -p "Include project in Apache and hosts-file configuration (Y/n): " hosts_and_apache


	# TODO: Test on Apache 2.4
	# Add Directory directive to project Apache conf to ensure project can run in current location
	echo "<Directory ${working_directory}>" >> apache/httpd-vhosts.conf
	echo "	Options All" >> apache/httpd-vhosts.conf
	echo "	AllowOverride All" >> apache/httpd-vhosts.conf
	echo "	Order allow,deny" >> apache/httpd-vhosts.conf
	echo "	Allow from all" >> apache/httpd-vhosts.conf
	echo "</Directory>" >> apache/httpd-vhosts.conf


fi



# TODO: Test on Apache 2.4
# Add actual VHOST configuration
echo "<VirtualHost *:80>" >> apache/httpd-vhosts.conf
echo "	DocumentRoot \"${working_directory}/theme/www\"" >> apache/httpd-vhosts.conf
echo "	ServerName ${domain}" >> apache/httpd-vhosts.conf
echo "	Alias \"/janitor/admin\" \"${working_directory}/submodules/janitor/src\"" >> apache/httpd-vhosts.conf
echo "	SetEnv \"LOCAL_PATH\" \"${working_directory}/theme\"" >> apache/httpd-vhosts.conf
echo "	SetEnv \"FRAMEWORK_PATH\" \"${working_directory}/submodules/janitor/src\"" >> apache/httpd-vhosts.conf
echo "</VirtualHost>" >> apache/httpd-vhosts.conf




# HOSTS AND GLOBAL APACHE SETTINGS


# Set up hosts and Apache
if [ "${hosts_and_apache}" = "Y" ]; then


	# Check hosts configuration
	hosts_entry_exists=$( grep -E "${domain}$" "/etc/hosts" )
	if [ -z "${hosts_entry_exists}" ]; then

		echo
		echo "Updating /etc/hosts"

		sudo chmod 777 /etc/hosts

		echo "" >> /etc/hosts
		echo "" >> /etc/hosts
		echo "127.0.0.1	${domain}" >> /etc/hosts
		echo "fe80::1%lo0	${domain}" >> /etc/hosts
		echo "::1			${domain}" >> /etc/hosts

		sudo chmod 644 /etc/hosts


	# Hosts entry already exists for current domain
	else

		echo
		echo "Skipping hosts (domain exists)"

	fi



	# Not parentnode environment - set up parentnode locations to mimic full environment
	if [ "${parentnode_env}" = "n" ]; then


		echo
		echo "Looking for possible httpd.conf's ..."
		echo

		IFS_backup=$IFS
		IFS=$'\n'
		httpd_confs=($( sudo find /etc /private /opt /Users/${install_user}/Applications -name 'httpd.conf' ! -wholename '*/original/httpd.conf' ! -wholename '*/rsync.macports.org/*' ))
		IFS=$IFS_backup

		httpd_confs_length=${#httpd_confs[@]}
		for (( i = 0; i < ${httpd_confs_length}; i++ )); do
			echo "$((i + 1)): ${httpd_confs[$i]}"
		done


		# Let user select httpd.conf
		read -p "Select your active httpd.conf [1-${httpd_confs_length}]: " active_httpd_conf


		# Is response within allowed range
		if [ ${active_httpd_conf} -gt 0 ] && [ ${active_httpd_conf} -le ${httpd_confs_length} ]; then
			httpd_file="${httpd_confs[$(( active_httpd_conf - 1 ))]}"
		else

			echo "${RED}"
			echo "I will do anything for love but I can't do that!"
			echo "(Bad input)"
			echo "${NC}"

			exit 1

		fi



		echo
		echo "Extending ${httpd_file}"



		# Find server root
		server_root=$( grep -E "^ServerRoot " "${httpd_file}" | sed -e "s%\ServerRoot %%;s%\"%%g" )



		# Check if virtual hosts are enabled in Apache conf
		vhosts_include="no"
		vhosts_path="no"


		# Find all vhost includes (both active and commented out)
		IFS_backup=$IFS
		IFS=$'\n'
		vhosts_includes=($( grep -E "Include .+\/httpd-vhosts\.conf" "${httpd_file}" ))
		IFS=$IFS_backup

		vhosts_includes_length=${#vhosts_includes[@]}
		# Abort if there is no vhosts include in httpd.conf
		if [ ${vhosts_includes_length} -eq 0 ]; then

			echo "${RED}"
			echo "Keep the rubberduck away from fire."
			echo "(Could not find default vhost include)"
			echo "${NC}"

			exit 1

		fi

		# Look for active vhosts include
		for (( i = 0; i < ${vhosts_includes_length}; i++ )); do

			# Found valid include
			active_vhost_include=$( echo "${vhosts_includes[$i]}" | grep -E "^Include" )
			# Is it active
			if [ ! -z "${active_vhost_include}" ]; then
				vhosts_include=${vhosts_includes[$i]}
				vhosts_path=$( echo "${vhosts_include}" | sed -e "s%Include %${server_root}/%" )
				break
			fi

		done

		# No active vhost include found
		if [ "${vhosts_include}" = "no" ]; then

			echo
			echo "Activating virtual hosts"
		
			# Remove "#" from include string
			vhosts_include=$( echo "${vhosts_includes[0]}" | sed "s/^#I/I/" )

			# Replace vhost string in httpd.conf
			sudo sed -i -e "s%${vhosts_includes[0]}%${vhosts_include}%" "${httpd_file}"

			# get clean vhosts file
			vhosts_path=$( echo "${vhosts_include}" | sed -e "s%Include %${server_root}/%" )

			# this is probably the default vhosts - so it should be cleaned up (commenting out dummy examples)
			if [ -e "${vhosts_path}" ]; then
				sudo sed -i -e "s/^\([< ]\)/#\1/" "${vhosts_path}"
			fi

		fi


		# Did we find valid default vhosts file
		if [ ! -e "${vhosts_path}" ]; then

			echo "${RED}"
			echo "Yikes! I thought I knew everything. I was wrong."
			echo "(Could not find default vhost include)"
			echo "${NC}"

			exit 1

		fi


		# Everything is good


		echo
		echo "Creating parentNode locations"

		# Add paths and /srv/sites link
		sudo mkdir -p /srv &>/dev/null
		mkdir -p ~/Sites/apache

		if [ ! -d "/srv/sites" ]; then
			sudo ln -s ~/Sites /srv/sites
		fi


		echo
		echo "Adding ~/Sites/apache/apache.conf for including virtual hosts"

		# Create global apache include
		touch /srv/sites/apache/apache.conf



		# Add local apache/*.conf to apache httpd-vhosts.conf (if it is not there already)
		local_apache_include_exists=$( grep "Include /srv/sites/apache/\*.conf" "${vhosts_path}" )
		if [ -z "${local_apache_include_exists}" ]; then

			sudo chmod 777 "${vhosts_path}"

			# Include global apache.conf for all apache installations
			echo "" >> "${vhosts_path}"
			echo "Include /srv/sites/apache/*.conf" >> "${vhosts_path}"

			sudo chmod 644 "${vhosts_path}"

		fi


	fi
	# End of non-parentnode setup


	# Add project apache conf to global apache conf (if it is not there already)
	apache_include_exists=$( grep "Include ${working_directory}/apache/httpd-vhosts.conf" "/srv/sites/apache/apache.conf" )
	if [ -z "${apache_include_exists}" ]; then

		echo "" >> /srv/sites/apache/apache.conf
		echo "" >> /srv/sites/apache/apache.conf
		echo "Include ${working_directory}/apache/httpd-vhosts.conf" >> /srv/sites/apache/apache.conf

	fi




	# RESTART


	echo
	echo "Looking for possible apachectl's ..."
	echo

	IFS_backup=$IFS
	IFS=$'\n'
	apachectls=( $( sudo find /usr /opt /Users/${install_user}/Applications -name 'apachectl' ) )
	IFS=$IFS_backup

	apachectls_length=${#apachectls[@]}
	for (( i = 0; i < ${apachectls_length}; i++ )); do
		echo "$((i + 1)): ${apachectls[$i]}"
	done

	read -p "Select your active Apache controller [1-$apachectls_length]: " active_apache

	apache_ctl="${apachectls[$(( active_apache - 1 ))]}";

	echo
	echo "Restating "

	# restart selected apache
	sudo ${apache_ctl} restart



	echo
	echo "Your installation is done!"


# Don't set up hosts and Apache
else


	echo
	echo "Your installation is done!"
	echo "(but remember to include your project in the hosts-file and Apache conf – and then restart Apache)"


fi



echo 
echo "Go to http://${domain}/janitor/admin/setup in your browser and continue the setup process."
echo

exit 1
